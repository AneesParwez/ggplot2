\section{dpylr}

$\textbf{Tibble}$ is a data type like data frame for working in tidyverse. 

The key words in dplyr are the verbs of data manipulation. These are:
$\begin{itemize}
 \item filter
  \item arrange
  \item select
  \item mutate 
  \item resize
 \end{itemize}$

These can all be used in conjunction with group_by(), which changes the scope of each function from operating on the entire dataset to operating on it group-by-group. 

filter() woks by taking the first argument as dataset and follwed by them are the column names.
```{r}
library(nycflights13)
library(dplyr)
filter(flights, month == 1, day == 1)
```

Since R uses approaximation, we might make use of near() instead of ==
```{r}

sqrt(2) ^ 2 == 2
#> [1] FALSE
near(sqrt(2) ^ 2, 2)
#> [1] TRUE
```
We can use logical operators too
```{r}
filter(flights, month == 11 | month == 12)
#And not this 11|12 = TRUE (=1)
filter(flights, month == 11 | 12)
filter(flights,month %in% c(11,12))
```
A useful shorthand for this problem is x %in% y. This will select every row where x is one of the values in y. 
```{r}
NA == NA
#> [1] NA
# Hence, use is.na(x)
```
filter() only includes rows where the condition is TRUE; it excludes both FALSE and NA values. If you want to preserve missing values, ask for them explicitly:
```{r}
df <- tibble(x = c(1, NA, 3))
filter(df, x > 1)
filter(df, is.na(x) | x > 1)
```


arrange() works similarly to filter() except that instead of selecting rows, it changes their order. If you provide more than one column name, each additional column will be used to break ties in the values of preceding columns:
```{r}
arrange(flights, year, month, day)
#MISSING VALUES AT END
f <- tibble(x = c(5, 2, NA))
arrange(df, x)
arrange(df, desc(x))
```
















